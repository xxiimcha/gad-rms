import { NgModule, Optional } from '@angular/core';
import { TablerIconComponent } from './tabler-icon.component';
import { OptionsProvider } from './options.provider';
import * as i0 from "@angular/core";
import * as i1 from "./options.provider";
export class TablerIconsModule {
    constructor(options) {
        this.options = options;
        if (!this.options) {
            throw new Error(`No icon provided. Make sure to use 'TablerIconsModule.pick({ ... })' when importing the module\n` +
                `Refer to documentation on https://github.com/pierreavn/angular-tabler-icons`);
        }
    }
    /**
     * Initialize module with given icons and options
     * @param icons
     * @returns Module with options
     */
    static pick(icons, options) {
        return {
            ngModule: TablerIconsModule,
            providers: [
                {
                    provide: OptionsProvider,
                    useValue: {
                        icons,
                        ...options
                    },
                    multi: true
                }
            ]
        };
    }
}
TablerIconsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TablerIconsModule, deps: [{ token: i1.OptionsProvider, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });
TablerIconsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.3.0", ngImport: i0, type: TablerIconsModule, declarations: [TablerIconComponent], exports: [TablerIconComponent] });
TablerIconsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TablerIconsModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TablerIconsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        TablerIconComponent
                    ],
                    exports: [
                        TablerIconComponent
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i1.OptionsProvider, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGVyLWljb25zLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItdGFibGVyLWljb25zL3NyYy9saWIvdGFibGVyLWljb25zLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7QUFZckQsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QixZQUNzQixPQUF3QjtRQUF4QixZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQUU1QyxJQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRztZQUNuQixNQUFNLElBQUksS0FBSyxDQUNiLGtHQUFrRztnQkFDbEcsNkVBQTZFLENBQzlFLENBQUM7U0FDSDtJQUNILENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFrQixFQUFFLE9BQWlCO1FBQy9DLE9BQU87WUFDTCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsZUFBZTtvQkFDeEIsUUFBUSxFQUFFO3dCQUNSLEtBQUs7d0JBQ0wsR0FBRyxPQUFPO3FCQUNYO29CQUNELEtBQUssRUFBRSxJQUFJO2lCQUNaO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7OEdBL0JVLGlCQUFpQjsrR0FBakIsaUJBQWlCLGlCQU4xQixtQkFBbUIsYUFHbkIsbUJBQW1COytHQUdWLGlCQUFpQjsyRkFBakIsaUJBQWlCO2tCQVI3QixRQUFRO21CQUFDO29CQUNSLFlBQVksRUFBRTt3QkFDWixtQkFBbUI7cUJBQ3BCO29CQUNELE9BQU8sRUFBRTt3QkFDUCxtQkFBbUI7cUJBQ3BCO2lCQUNGOzswQkFHSSxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUYWJsZXJJY29uQ29tcG9uZW50IH0gZnJvbSAnLi90YWJsZXItaWNvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgT3B0aW9uc1Byb3ZpZGVyIH0gZnJvbSAnLi9vcHRpb25zLnByb3ZpZGVyJztcbmltcG9ydCB7IE9wdGlvbkljb25zLCBPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zLmludGVyZmFjZXMnO1xuXG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFRhYmxlckljb25Db21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIFRhYmxlckljb25Db21wb25lbnRcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBUYWJsZXJJY29uc01vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgb3B0aW9uczogT3B0aW9uc1Byb3ZpZGVyXG4gICkge1xuICAgIGlmICggIXRoaXMub3B0aW9ucyApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYE5vIGljb24gcHJvdmlkZWQuIE1ha2Ugc3VyZSB0byB1c2UgJ1RhYmxlckljb25zTW9kdWxlLnBpY2soeyAuLi4gfSknIHdoZW4gaW1wb3J0aW5nIHRoZSBtb2R1bGVcXG5gICtcbiAgICAgICAgYFJlZmVyIHRvIGRvY3VtZW50YXRpb24gb24gaHR0cHM6Ly9naXRodWIuY29tL3BpZXJyZWF2bi9hbmd1bGFyLXRhYmxlci1pY29uc2BcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgbW9kdWxlIHdpdGggZ2l2ZW4gaWNvbnMgYW5kIG9wdGlvbnNcbiAgICogQHBhcmFtIGljb25zXG4gICAqIEByZXR1cm5zIE1vZHVsZSB3aXRoIG9wdGlvbnNcbiAgICovXG4gIHN0YXRpYyBwaWNrKGljb25zOiBPcHRpb25JY29ucywgb3B0aW9ucz86IE9wdGlvbnMpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFRhYmxlckljb25zTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBUYWJsZXJJY29uc01vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogT3B0aW9uc1Byb3ZpZGVyLFxuICAgICAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgICAgICBpY29ucyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnNcbiAgICAgICAgICB9LFxuICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=