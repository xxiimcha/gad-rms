import { Component, ElementRef, Input, Inject, ChangeDetectorRef } from '@angular/core';
import { OptionsProvider } from './options.provider';
import { uppercamelcase } from './utils';
import * as i0 from "@angular/core";
export class TablerIconComponent {
    constructor(elem, changeDetector, options) {
        this.elem = elem;
        this.changeDetector = changeDetector;
        this.options = options;
    }
    ngOnChanges(changes) {
        // icons are provided as an array of objects because of "multi: true"
        const icons = Object.assign({}, ...this.options.map(option => option.icons));
        const svg = icons[`Icon${uppercamelcase(changes.name.currentValue)}`] ?? '';
        if (!svg && !this.options.some(option => option.ignoreWarnings)) {
            console.warn(`Tabler Icon not found: ${changes.name.currentValue}\n` +
                `Refer to documentation on https://github.com/pierreavn/angular-tabler-icons`);
        }
        this.elem.nativeElement.innerHTML = svg;
        this.changeDetector.markForCheck();
    }
}
TablerIconComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TablerIconComponent, deps: [{ token: ElementRef }, { token: ChangeDetectorRef }, { token: OptionsProvider }], target: i0.ɵɵFactoryTarget.Component });
TablerIconComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: TablerIconComponent, selector: "i-tabler, tabler-icon", inputs: { name: "name" }, usesOnChanges: true, ngImport: i0, template: "<ng-content></ng-content>\n", styles: [":host{display:inline-block;width:24px;height:24px;fill:none;stroke:currentColor;stroke-width:2px;stroke-linecap:round;stroke-linejoin:round}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TablerIconComponent, decorators: [{
            type: Component,
            args: [{ selector: 'i-tabler, tabler-icon', template: "<ng-content></ng-content>\n", styles: [":host{display:inline-block;width:24px;height:24px;fill:none;stroke:currentColor;stroke-width:2px;stroke-linecap:round;stroke-linejoin:round}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [OptionsProvider]
                }] }]; }, propDecorators: { name: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGVyLWljb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci10YWJsZXItaWNvbnMvc3JjL2xpYi90YWJsZXItaWNvbi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLXRhYmxlci1pY29ucy9zcmMvbGliL3RhYmxlci1pY29uLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBRWxILE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sU0FBUyxDQUFDOztBQVN6QyxNQUFNLE9BQU8sbUJBQW1CO0lBRzlCLFlBQzhCLElBQWdCLEVBQ1QsY0FBaUMsRUFDbkMsT0FBa0I7UUFGdkIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNULG1CQUFjLEdBQWQsY0FBYyxDQUFtQjtRQUNuQyxZQUFPLEdBQVAsT0FBTyxDQUFXO0lBQ2xELENBQUM7SUFFSixXQUFXLENBQUMsT0FBc0I7UUFDaEMscUVBQXFFO1FBQ3JFLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM3RSxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsT0FBTyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRTVFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUMvRCxPQUFPLENBQUMsSUFBSSxDQUNWLDBCQUEwQixPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSTtnQkFDdkQsNkVBQTZFLENBQzlFLENBQUM7U0FDSDtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7UUFDeEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNyQyxDQUFDOztnSEF2QlUsbUJBQW1CLGtCQUlwQixVQUFVLGFBQ1YsaUJBQWlCLGFBQ2pCLGVBQWU7b0dBTmQsbUJBQW1CLDRHQ1poQyw2QkFDQTsyRkRXYSxtQkFBbUI7a0JBTi9CLFNBQVM7K0JBRUUsdUJBQXVCOzswQkFROUIsTUFBTTsyQkFBQyxVQUFVOzswQkFDakIsTUFBTTsyQkFBQyxpQkFBaUI7OzBCQUN4QixNQUFNOzJCQUFDLGVBQWU7NENBTGhCLElBQUk7c0JBQVosS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIEluamVjdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucy5pbnRlcmZhY2VzJztcbmltcG9ydCB7IE9wdGlvbnNQcm92aWRlciB9IGZyb20gJy4vb3B0aW9ucy5wcm92aWRlcic7XG5pbXBvcnQgeyB1cHBlcmNhbWVsY2FzZSB9IGZyb20gJy4vdXRpbHMnO1xuXG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnaS10YWJsZXIsIHRhYmxlci1pY29uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RhYmxlci1pY29uLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbICcuL3RhYmxlci1pY29uLmNvbXBvbmVudC5zY3NzJyBdLFxufSlcbmV4cG9ydCBjbGFzcyBUYWJsZXJJY29uQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgbmFtZSE6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgZWxlbTogRWxlbWVudFJlZixcbiAgICBASW5qZWN0KENoYW5nZURldGVjdG9yUmVmKSBwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBASW5qZWN0KE9wdGlvbnNQcm92aWRlcikgcHJpdmF0ZSBvcHRpb25zOiBPcHRpb25zW11cbiAgKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAvLyBpY29ucyBhcmUgcHJvdmlkZWQgYXMgYW4gYXJyYXkgb2Ygb2JqZWN0cyBiZWNhdXNlIG9mIFwibXVsdGk6IHRydWVcIlxuICAgIGNvbnN0IGljb25zID0gT2JqZWN0LmFzc2lnbih7fSwgLi4udGhpcy5vcHRpb25zLm1hcChvcHRpb24gPT4gb3B0aW9uLmljb25zKSk7XG4gICAgY29uc3Qgc3ZnID0gaWNvbnNbYEljb24ke3VwcGVyY2FtZWxjYXNlKGNoYW5nZXMubmFtZS5jdXJyZW50VmFsdWUpfWBdID8/ICcnO1xuXG4gICAgaWYgKCFzdmcgJiYgIXRoaXMub3B0aW9ucy5zb21lKG9wdGlvbiA9PiBvcHRpb24uaWdub3JlV2FybmluZ3MpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBUYWJsZXIgSWNvbiBub3QgZm91bmQ6ICR7Y2hhbmdlcy5uYW1lLmN1cnJlbnRWYWx1ZX1cXG5gICtcbiAgICAgICAgYFJlZmVyIHRvIGRvY3VtZW50YXRpb24gb24gaHR0cHM6Ly9naXRodWIuY29tL3BpZXJyZWF2bi9hbmd1bGFyLXRhYmxlci1pY29uc2BcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MID0gc3ZnO1xuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IubWFya0ZvckNoZWNrKCk7XG4gIH1cbn1cbiIsIjxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiJdfQ==